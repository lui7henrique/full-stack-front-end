/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * API
 * API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  GetDashboardMetricsParams
} from './endpoints.schemas'
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetDashboardMetrics200
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance';




export const getDashboardMetrics = (
    params?: GetDashboardMetricsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<GetDashboardMetrics200>(
      {url: `/dashboard/metrics`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDashboardMetricsQueryKey = (params?: GetDashboardMetricsParams,) => {
    return [`/dashboard/metrics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDashboardMetricsQueryOptions = <TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(params?: GetDashboardMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDashboardMetricsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboardMetrics>>> = ({ signal }) => getDashboardMetrics(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDashboardMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof getDashboardMetrics>>>
export type GetDashboardMetricsQueryError = void


export function useGetDashboardMetrics<TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(
 params: undefined |  GetDashboardMetricsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboardMetrics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDashboardMetrics<TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(
 params?: GetDashboardMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboardMetrics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDashboardMetrics<TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(
 params?: GetDashboardMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetDashboardMetrics<TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(
 params?: GetDashboardMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDashboardMetricsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetDashboardMetricsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(params?: GetDashboardMetricsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDashboardMetricsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboardMetrics>>> = ({ signal }) => getDashboardMetrics(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDashboardMetricsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getDashboardMetrics>>>
export type GetDashboardMetricsSuspenseQueryError = void


export function useGetDashboardMetricsSuspense<TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(
 params: undefined |  GetDashboardMetricsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDashboardMetricsSuspense<TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(
 params?: GetDashboardMetricsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDashboardMetricsSuspense<TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(
 params?: GetDashboardMetricsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetDashboardMetricsSuspense<TData = Awaited<ReturnType<typeof getDashboardMetrics>>, TError = void>(
 params?: GetDashboardMetricsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDashboardMetrics>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDashboardMetricsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





export const getGetDashboardMetricsResponseMock = (overrideResponse: Partial< GetDashboardMetrics200 > = {}): GetDashboardMetrics200 => ({averageOrderValue: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalOrders: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalRevenue: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})


export const getGetDashboardMetricsMockHandler = (overrideResponse?: GetDashboardMetrics200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetDashboardMetrics200> | GetDashboardMetrics200)) => {
  return http.get('*/dashboard/metrics', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDashboardMetricsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getDashboardMock = () => [
  getGetDashboardMetricsMockHandler()
]
